function [scaleInterpolated, dcOffSetInterpolated] = interpolateScaleAndDCOffset(invFilterResults, timeMarks)
	scaleInterpolated = invFilterResults.scale;
	dcOffSetInterpolated = invFilterResults.dcOffset;
	scaleInterpolated(1) = scaleInterpolated(2);
	dcOffSetInterpolated(1) = dcOffSetInterpolated(2);
	scaleInterpolated(length(invFilterResults.scale)) = scaleInterpolated(length(invFilterResults.scale) - 1);
	dcOffSetInterpolated(length(invFilterResults.dcOffset)) = dcOffSetInterpolated(length(invFilterResults.dcOffset) - 1);
	scaleInterpolated = interp1(timeMarks.pitchMarks(1, :) ...
	            + round((timeMarks.pitchMarks(2, :) - timeMarks.pitchMarks(1, :)) / 2),...
	            scaleInterpolated,...
	            0 : (length(invFilterResults.glotFlow) - 1), 'spline', 'extrap' ...
	            );
	dcOffSetInterpolated = interp1(timeMarks.pitchMarks(1, :) ...
	            + round((timeMarks.pitchMarks(2, :) - timeMarks.pitchMarks(1, :)) / 2),...
	            dcOffSetInterpolated,...
	            0 : (length(invFilterResults.glotFlow) - 1), 'spline', 'extrap' ...
	            );
	%scaleInterpolated = shepard_value_1d(length(scaleInterpolated), timeMarks.pitchMarks(1, :), scaleInterpolated, 8, length(invFilterResults.glotFlow), 0 : (length(invFilterResults.glotFlow) - 1));
	%dcOffSetInterpolated = shepard_value_1d(length(dcOffSetInterpolated), timeMarks.pitchMarks(1, :), dcOffSetInterpolated, 8, length(invFilterResults.glotFlow), 0 : (length(invFilterResults.glotFlow) - 1));

	if size(scaleInterpolated, 1) ~= size(invFilterResults.glotFlow, 1)
	    scaleInterpolated = transpose(scaleInterpolated);
	    dcOffSetInterpolated = transpose(dcOffSetInterpolated);
	end
end